2023-05-28 19:40:37.681201: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:37.691557: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:37.696756: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:38.988936: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-05-28 19:40:38.994382: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:39.005157: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:39.012555: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:39.710909: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:39.712299: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:39.713684: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-05-28 19:40:39.716073: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 21285 MB memory:  -> device: 0, name: NVIDIA RTX A5000, pci bus id: 0000:01:00.0, compute capability: 8.6
all_x.shape:  (4836, 32, 7)
all_t.shape:  (4836, 32, 1)
all_y.shape:  (4836, 32)
Total number of sequences: 4836
train_x.shape:  (3869, 32, 7)
train_t.shape:  (3869, 32, 1)
train_y.shape:  (3869, 32)
Total number of train sequences: 3869
Total number of test  sequences: 967
  0%|          | 0/31 [00:00<?, ?it/s]2023-05-28 19:40:40.653041: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)
2023-05-28 19:40:41.446417: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.
  3%|▎         | 1/31 [00:01<00:43,  1.46s/it]  6%|▋         | 2/31 [00:02<00:30,  1.07s/it] 10%|▉         | 3/31 [00:03<00:26,  1.06it/s] 13%|█▎        | 4/31 [00:03<00:24,  1.09it/s]WARNING:tensorflow:5 out of the last 5 calls to <function IFGSM.__call__ at 0x7f803e9cbd30> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
 16%|█▌        | 5/31 [00:04<00:22,  1.15it/s]WARNING:tensorflow:6 out of the last 6 calls to <function IFGSM.__call__ at 0x7f803e9cbee0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
 19%|█▉        | 6/31 [00:05<00:21,  1.18it/s] 23%|██▎       | 7/31 [00:06<00:19,  1.21it/s] 26%|██▌       | 8/31 [00:07<00:18,  1.22it/s] 29%|██▉       | 9/31 [00:07<00:18,  1.19it/s] 32%|███▏      | 10/31 [00:08<00:17,  1.21it/s] 35%|███▌      | 11/31 [00:09<00:16,  1.23it/s] 39%|███▊      | 12/31 [00:10<00:15,  1.24it/s] 42%|████▏     | 13/31 [00:11<00:14,  1.25it/s] 45%|████▌     | 14/31 [00:12<00:14,  1.18it/s] 48%|████▊     | 15/31 [00:12<00:13,  1.20it/s] 52%|█████▏    | 16/31 [00:13<00:12,  1.22it/s] 55%|█████▍    | 17/31 [00:14<00:11,  1.23it/s] 58%|█████▊    | 18/31 [00:15<00:10,  1.23it/s] 61%|██████▏   | 19/31 [00:16<00:09,  1.23it/s] 65%|██████▍   | 20/31 [00:17<00:09,  1.18it/s] 68%|██████▊   | 21/31 [00:17<00:08,  1.19it/s] 71%|███████   | 22/31 [00:18<00:07,  1.21it/s] 74%|███████▍  | 23/31 [00:19<00:06,  1.22it/s] 77%|███████▋  | 24/31 [00:20<00:05,  1.23it/s] 81%|████████  | 25/31 [00:21<00:04,  1.23it/s] 84%|████████▍ | 26/31 [00:22<00:04,  1.18it/s] 87%|████████▋ | 27/31 [00:22<00:03,  1.20it/s] 90%|█████████ | 28/31 [00:23<00:02,  1.21it/s] 94%|█████████▎| 29/31 [00:24<00:01,  1.22it/s] 97%|█████████▋| 30/31 [00:25<00:00,  1.23it/s]100%|██████████| 31/31 [00:26<00:00,  1.24it/s]100%|██████████| 31/31 [00:26<00:00,  1.19it/s]
total_loss: 1.6336894035339355 	 total_accuracy: 0.6073229058945191
